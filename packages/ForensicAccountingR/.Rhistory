x <- c(142500.72874494,142500.72874494,142500.72874494)
stdev(x)
std(x)
sd(x)
x
x <- c(double(142500.72874494),142500.72874494,142500.72874494)
sd(x)
x <- c(142500.72874494,142500.72874494,142500.72874494)
sd(x)
x <- c(as.double(142500.72874494),142500.72874494,142500.72874494)
sd(x)
x
dput(x)
library(sqlmlutils)
# NOTE:  need to do this for *each* database!
db_connection <- connectionInfo(driver = "ODBC Driver 17 for SQL Server", server = "localhost", database = "Scratch")
# NOTE:  need to do this for *each* database!
db_connection <- connectionInfo(driver = "ODBC Driver 17 for SQL Server", server = "localhost", database = "ExpenseReports")
# Install one package.
sql_install.packages(
connectionString = db_connection,
pkgs = "tidyverse",
scope = "PUBLIC",
verbose = TRUE
)
# Install multiple packages.
sql_install.packages(
connectionString = db_connection,
pkgs = c("xgboost"),
scope = "PUBLIC",
verbose = TRUE
)
sql_install.packages(
connectionString = db_connection,
pkgs = c("data.table"),
scope = "PUBLIC",
verbose = TRUE
)
require("data.table")
conn <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "localhost", Database = "ExpenseReports", Trusted_Connection = "True")
install.packages("odbc", repos = "http://archive.linux.duke.edu/cran/")
conn <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "localhost", Database = "ExpenseReports", Trusted_Connection = "True")
#install.packages("odbc", repos = "http://archive.linux.duke.edu/cran/")
expenseReports <- DBI::dbGetQuery(conn, "
SELECT
er.EmployeeID,
CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName,
ec.ExpenseCategoryID,
ec.ExpenseCategory,
er.ExpenseDate,
YEAR(er.ExpenseDate) AS ExpenseYear,
er.Amount
FROM dbo.ExpenseReport er
INNER JOIN dbo.ExpenseCategory ec
ON er.ExpenseCategoryID = ec.ExpenseCategoryID
INNER JOIN dbo.Employee e
ON e.EmployeeID = er.EmployeeID
WHERE
er.ExpenseDate < '2017-01-01';
")
erData <- expenseReports
erData
erData[, .(ExpenseCategoryID, ExpenseYear)]
erData[, c("ExpenseCategoryID", "ExpenseYear")]
library(sqlmlutils)
# NOTE:  need to do this for *each* database!
db_connection <- connectionInfo(driver = "ODBC Driver 17 for SQL Server", server = "localhost", database = "ExpenseReports")
r <- sql_installed.packages(connectionString = db_connection, fields=c("Package", "Version", "LibPath", "Attributes", "Scope"))
View(r)
# Install multiple packages.
sql_install.packages(
connectionString = db_connection,
pkgs = c("data.table"),
scope = "PUBLIC",
verbose = TRUE,
repos = "https://cran.microsoft.com"
)
View(r)
sql_remove.packages(
connectionString = db_connection,
pkgs = c("xgboost", "data.table"),
scope = "PUBLIC",
verbose = TRUE
)
# Install multiple packages.
sql_install.packages(
connectionString = db_connection,
pkgs = c("data.table", "xgboost"),
scope = "PUBLIC",
verbose = TRUE,
repos = "https://cran.microsoft.com"
)
library(devtools)
find_rtools()
find_rtools()
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
assignInNamespace("version_info", c(devtools:::version_info, list("3.5.1" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
install.packages("devtools", repos = "https://cran.microsoft.com")
install.packages("devtools", repos = "https://cran.microsoft.com")
library(devtools)
find_rtools()
library(devtools)
find_rtools()
library(devtools)
find_rtools()
library(ForensicAccountingR)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/MyCustomPackage_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
library(sqlmlutils)
# NOTE:  need to do this for *each* database!
db_connection <- connectionInfo(driver = "ODBC Driver 17 for SQL Server", server = "localhost", database = "ExpenseReports")
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/MyCustomPackage_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/ForensicAccountingR_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
sql_remove.packages(
connectionString = db_connection,
pkgs = "ForensicAccountingR",
dependencies = FALSE,
checkReferences = TRUE,
scope = "PUBLIC",
verbose = TRUE
)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/ForensicAccountingR_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
sql_remove.packages(
connectionString = db_connection,
pkgs = "ForensicAccountingR",
dependencies = FALSE,
checkReferences = TRUE,
scope = "PUBLIC",
verbose = TRUE
)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/ForensicAccountingR_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
sql_remove.packages(
connectionString = db_connection,
pkgs = "ForensicAccountingR",
dependencies = FALSE,
checkReferences = TRUE,
scope = "PUBLIC",
verbose = TRUE
)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/ForensicAccountingR_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
sql_remove.packages(
connectionString = db_connection,
pkgs = "ForensicAccountingR",
dependencies = FALSE,
checkReferences = TRUE,
scope = "PUBLIC",
verbose = TRUE
)
sql_install.packages(
connectionString = db_connection,
pkgs = "C:/SourceCode/Developing-Machine-Learning-Services/packages/ForensicAccountingR_0.1.0.zip",
verbose = TRUE,
scope = "PUBLIC",
repos = NULL
)
require("data.table")
conn <- DBI::dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "localhost", Database = "ExpenseReports", Trusted_Connection = "True")
#install.packages("odbc", repos = "http://archive.linux.duke.edu/cran/")
expenseReports <- DBI::dbGetQuery(conn, "
SELECT
er.EmployeeID,
CONCAT(e.FirstName, ' ', e.LastName) AS EmployeeName,
ec.ExpenseCategoryID,
ec.ExpenseCategory,
er.ExpenseDate,
YEAR(er.ExpenseDate) AS ExpenseYear,
er.Amount
FROM dbo.ExpenseReport er
INNER JOIN dbo.ExpenseCategory ec
ON er.ExpenseCategoryID = ec.ExpenseCategoryID
INNER JOIN dbo.Employee e
ON e.EmployeeID = er.EmployeeID
WHERE
er.ExpenseDate < '2017-01-01';
")
erData <- expenseReports
erData[, c("ExpenseCategoryID", "ExpenseYear")]
